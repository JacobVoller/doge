//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace DogeServer.Clients
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRegulationClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Agencies
        /// </summary>
        /// <remarks>
        /// All top-level agencies in name order with children also in name order
        /// </remarks>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "agencies": [
        /// <br/>      {
        /// <br/>        "name": "Administrative Conference of the United States",
        /// <br/>        "short_name": "ACUS",
        /// <br/>        "display_name": "Administrative Conference of the United States",
        /// <br/>        "sortable_name": "Administrative Conference of the United States",
        /// <br/>        "slug": "administrative-conference-of-the-united-states",
        /// <br/>        "children": [],
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 1,
        /// <br/>            "chapter": "III"
        /// <br/>          }
        /// <br/>        ]
        /// <br/>      },
        /// <br/>  ...
        /// <br/>      {
        /// <br/>        "name": "Department of Agriculture",
        /// <br/>        "short_name": "USDA",
        /// <br/>        "display_name": "Department of Agriculture",
        /// <br/>        "sortable_name": "Agriculture, Department of",
        /// <br/>        "slug": "agriculture-department",
        /// <br/>        "children": [
        /// <br/>          {
        /// <br/>          "name": "Agricultural Marketing Service",
        /// <br/>          "short_name": "AMS",
        /// <br/>          "display_name": "Agricultural Marketing Service, Department of Agriculture",
        /// <br/>          "sortable_name": "Agricultural Marketing Service",
        /// <br/>          "slug": "agricultural-marketing-service",
        /// <br/>          "cfr_references": [
        /// <br/>            {
        /// <br/>              "title": 7,
        /// <br/>              "chapter": "I"
        /// <br/>            },
        /// <br/>            ...
        /// <br/>          ],
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 2,
        /// <br/>            "chapter": "IV",
        /// <br/>          },
        /// <br/>          ...
        /// <br/>        ]
        /// <br/>      },
        /// <br/>  ...
        /// <br/>      {
        /// <br/>        "name": "World Agricultural Outlook Board",
        /// <br/>        "short_name": "WAOB",
        /// <br/>        "display_name": "World Agricultural Outlook Board",
        /// <br/>        "sortable_name": "World Agricultural Outlook Board",
        /// <br/>        "slug": "world-agricultural-outlook-board",
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 7,
        /// <br/>            "chapter": "XXXVIII"
        /// <br/>          }
        /// <br/>        ]
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAgenciesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Corrections route returns all eCFR corrections.
        /// </summary>
        /// <remarks>
        /// The Corrections service can be used to determine all corrections or can be filtered by title, effective date, or correction date.
        /// </remarks>
        /// <param name="date">Restricts results to eCFR corrections that occurred on or before the specified date and that were corrected on or after the specified date. Format: YYYY-MM-DD</param>
        /// <param name="title">Restricts results to the given title number: Format: '1', '2', '50', etc</param>
        /// <param name="error_corrected_date">Returns only corrections that were corrected on the given date. Format: YYYY-MM-DD</param>
        /// <returns>```json
        /// <br/>  "ecfr_corrections": [
        /// <br/>    {
        /// <br/>      "id": 1,
        /// <br/>      "cfr_references": [
        /// <br/>        {
        /// <br/>          "cfr_reference": "7 CFR 2.80",
        /// <br/>          "hierarchy": {
        /// <br/>            "title": "7",
        /// <br/>            "subtitle": "A",
        /// <br/>            "part": "2",
        /// <br/>            "subpart": "N",
        /// <br/>            "section": "2.80"
        /// <br/>          }
        /// <br/>        }
        /// <br/>      ],
        /// <br/>      "corrective_action": "Amended",
        /// <br/>      "error_corrected": "2005-12-02",
        /// <br/>      "error_occurred": "2005-09-23",
        /// <br/>      "fr_citation": "70 FR 55706",
        /// <br/>      "position": 1,
        /// <br/>      "display_in_toc": false,
        /// <br/>      "title": 7,
        /// <br/>      "year": 2005,
        /// <br/>      "last_modified": "2021-12-22"
        /// <br/>    },
        /// <br/>...
        /// <br/>    {
        /// <br/>        "id": 3858,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "50 CFR 660.71",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "50",
        /// <br/>              "part": "660",
        /// <br/>              "section": "660.71"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": " (e)(398) and (399) correctly designated as (e)(298) and (299)\r\n           \r\n",
        /// <br/>        "error_corrected": "2023-01-09",
        /// <br/>        "error_occurred": "2023-01-01",
        /// <br/>        "fr_citation": "87 FR 77015",
        /// <br/>        "position": 3,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 50,
        /// <br/>        "year": 2023,
        /// <br/>        "last_modified": "2023-01-31"
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  ```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetCorrectionsAsync(System.DateTimeOffset? date = null, string title = null, System.DateTimeOffset? error_corrected_date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Corrections title route returns all corrections for the supplied title.
        /// </summary>
        /// <remarks>
        /// The Corrections service can be used to determine all corrections for the given title.
        /// </remarks>
        /// <param name="title">Restricts results to the given title number: Format: '1', '2', '50', etc</param>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "ecfr_corrections": [
        /// <br/>      {
        /// <br/>        "id": 1473,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "6 CFR Part 5",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "6",
        /// <br/>              "chapter": "I",
        /// <br/>              "part": "5"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": "Paragraph 72 added",
        /// <br/>        "error_corrected": "2014-11-12",
        /// <br/>        "error_occurred": "2014-04-02",
        /// <br/>        "fr_citation": "79 FR 18441",
        /// <br/>        "position": 1,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 6,
        /// <br/>        "year": 2014,
        /// <br/>        "last_modified": "2021-12-22"
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "id": 2252,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "6 CFR 1001.6",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "6",
        /// <br/>              "chapter": "X",
        /// <br/>              "part": "1001",
        /// <br/>              "section": "1001.6"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": "(b)(4) amended",
        /// <br/>        "error_corrected": "2018-01-16",
        /// <br/>        "error_occurred": "2017-08-28",
        /// <br/>        "fr_citation": "82 FR 34836",
        /// <br/>        "position": 1,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 6,
        /// <br/>        "year": 2018,
        /// <br/>        "last_modified": "2021-12-22"
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetCorrectionsByTitleAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search results
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <param name="per_page">number of results per page; max of 1,000</param>
        /// <param name="page">page of results; can't paginate beyond 10,000 total results</param>
        /// <param name="order">order of results</param>
        /// <param name="paginate_by">how results should be paginated - 'date' will group results so that all results from a date appear on the same page of pagination. If 'date' is chosen then one of the last_modified_* options is required.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetSearchResultsAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, int? per_page = null, int? page = null, Order? order = null, Paginate_by? paginate_by = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result count
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchResultCountAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search summary details
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchSummaryAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by date
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchResultCountsByDateAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by title
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchResultCountByTitleAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by hierarchy
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchResultCountsByHierarchyAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search suggestions
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSearchSuggestionsAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ancestors route returns all ancestors (including self) from a given level through the top title node.
        /// </summary>
        /// <remarks>
        /// The Ancestry service can be used to determine the complete ancestry to a leaf node at a specific point in time.
        /// <br/>### Example
        /// <br/>The complete hierarchy for **2 CFR 1532.137** is
        /// <br/>```
        /// <br/>Title 2
        /// <br/>  Subtitle B
        /// <br/>    Chapter XV
        /// <br/>      Part 1532
        /// <br/>        Subpart A
        /// <br/>          Section 1532.137
        /// <br/>```
        /// <br/>To retrieve this complete hierarchy you can use the ancestry endpoint and provide a Title, Part and Section (you can provide additional layers of the hierarchy) to retrieve a full ancestry.
        /// <br/>See sample json responses below.
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>```json
        /// <br/>  [
        /// <br/>    {
        /// <br/>        "type": "title",
        /// <br/>        "label": "Title 2 - Federal Financial Assistance",
        /// <br/>        "label_level": "Title 2",
        /// <br/>        "label_description": "Federal Financial Assistance",
        /// <br/>        "identifier": "2"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "subtitle",
        /// <br/>        "label": "Subtitle B - Federal Agency Regulations for Grants and Agreements",
        /// <br/>        "label_level": "Subtitle B",
        /// <br/>        "label_description": "Federal Agency Regulations for Grants and Agreements",
        /// <br/>        "identifier": "B",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 300.1 – 5900.101"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "chapter",
        /// <br/>        "label": "Chapter XV - Environmental Protection Agency",
        /// <br/>        "label_level": "Chapter XV",
        /// <br/>        "label_description": "Environmental Protection Agency",
        /// <br/>        "identifier": "XV",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 1500.1 – 1536.505"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "part",
        /// <br/>        "label": "Part 1532 - Nonprocurement Debarment and Suspension",
        /// <br/>        "label_level": "Part 1532",
        /// <br/>        "label_description": "Nonprocurement Debarment and Suspension",
        /// <br/>        "identifier": "1532",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 1532.10 – 1532.1600"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "subpart",
        /// <br/>        "label": "Subpart A - General",
        /// <br/>        "label_level": "Subpart A",
        /// <br/>        "label_description": "General",
        /// <br/>        "identifier": "A",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§ 1532.137"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "section",
        /// <br/>        "label": "§ 1532.137 Who in the EPA may grant an exception to let an excluded person participate in a covered transaction?",
        /// <br/>        "label_level": "§ 1532.137",
        /// <br/>        "label_description": "Who in the EPA may grant an exception to let an excluded person participate in a covered transaction?",
        /// <br/>        "identifier": "1532.137",
        /// <br/>        "reserved": false
        /// <br/>    }
        /// <br/>  ]
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAncestorsByTitleAsync(System.DateTimeOffset date, string title, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Source XML for a title or subset of a title. Requests can be for entire titles or part level and below.  Downloadable XML document is returned for title requests.  Processed XML is returned if part, subpart, section, or appendix is requested.
        /// </summary>
        /// <remarks>
        /// The title source route can be used to retrieve the source xml for a complete title or subset. The subset of xml is determined by the lowest leaf node given. For example, if you request Title 1, Chapter I, Part 1, you'll receive the XML only for Part 1 and its children.
        /// <br/>If you request a section you'll receive the section XML inside its parent Part as well as relevant non-section sibling nodes (Auth, Source, etc).
        /// <br/>The largest title source xml files can be dozens of megabytes.
        /// <br/>
        /// <br/>[GPO eCFR XML User guide](https://github.com/usgpo/bulk-data/blob/master/ECFR-XML-User-Guide.md)
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>A downloadable Title XML document for entire Title requests or processed XML for part level and below requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetSourceXmlByTitleAsync(System.DateTimeOffset date, string title, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Structure JSON for a title
        /// </summary>
        /// <remarks>
        /// The structure JSON endpoint returns the complete structure of a title back as json. This format does not include the content of the title but does include all structure and content nodes as well as their meta data including their type, label, description, identifier and children.
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "type": "title",
        /// <br/>    "label": "Title 3 - The President",
        /// <br/>    "label_level": "Title 3",
        /// <br/>    "label_description": "The President",
        /// <br/>    "identifier": "3",
        /// <br/>    "children": [
        /// <br/>      {
        /// <br/>        "type": "chapter",
        /// <br/>        "label": "Chapter I - Executive Office of the President",
        /// <br/>        "label_level": "Chapter I",
        /// <br/>        "label_description": "Executive Office of the President",
        /// <br/>        "identifier": "I",
        /// <br/>        "reserved": false,
        /// <br/>        "children": [
        /// <br/>          {
        /// <br/>            "type": "part",
        /// <br/>            "label": "Part 100 - Standards of Conduct",
        /// <br/>            "label_level": "Part 100",
        /// <br/>            "label_description": "Standards of Conduct",
        /// <br/>            "identifier": "100",
        /// <br/>            "reserved": false,
        /// <br/>            "children": [
        /// <br/>              {
        /// <br/>                "type": "section",
        /// <br/>                "label": "§ 100.1 Ethical conduct standards and financial disclosure regulations.",
        /// <br/>                "label_level": "§ 100.1",
        /// <br/>                "label_description": "Ethical conduct standards and financial disclosure regulations.",
        /// <br/>                "identifier": "100.1",
        /// <br/>                "reserved": false
        /// <br/>              }
        /// <br/>            ],
        /// <br/>            "section_range": "§ 100.1"
        /// <br/>          },
        /// <br/>        ],
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```|</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetJsonForTitleAsync(System.DateTimeOffset date, string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary information about each title
        /// </summary>
        /// <remarks>
        /// The Title service can be used to determine the status of each individual title and of the overall status of title imports and reprocessings. It returns an array of all titles containing a hash for each with the name of the title, the latest amended date, latest issue date, up-to-date date, reserved status, and if applicable, processing in progress status. The meta data returned indicates the latest issue date and whether titles are currently being reprocessed.
        /// </remarks>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "titles": [
        /// <br/>      {
        /// <br/>        "number": 1,
        /// <br/>        "name": "General Provisions",
        /// <br/>        "latest_amended_on": "2022-05-04",
        /// <br/>        "latest_issue_date": "2022-05-04",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "number": 2,
        /// <br/>        "name": "Federal Financial Assistance",
        /// <br/>        "latest_amended_on": "2022-05-19",
        /// <br/>        "latest_issue_date": "2022-06-03",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false,
        /// <br/>        "processing_in_progress": true
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "number": 3,
        /// <br/>        "name": "The President",
        /// <br/>        "latest_amended_on": "2015-03-17",
        /// <br/>        "latest_issue_date": "2019-06-27",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false
        /// <br/>      },
        /// <br/>      ...
        /// <br/>    ],
        /// <br/>    meta": {
        /// <br/>      "date": "2022-07-29",
        /// <br/>      "import_in_progress": true
        /// <br/>    }
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetTitlesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns an array of all sections and appendices inside a title.
        /// </summary>
        /// <remarks>
        /// Returns the content versions meeting the specified criteria. Each content object includes its identifier, parent hierarchy, last amendment date and issue date it was last updated. Queries return content versions `on` an issue date, or before or on a specific issue date `lte` or on or after `gte` a specific issue date. The `gte` and `lte` parameters may be combined. Use of the `on` parameter precludes use of `gte` or `lte`. In the response, the `date` field is identical to `amendment_date` and is deprecated.
        /// <br/>&lt;br&gt;
        /// <br/>A response of `400 Bad Request` indicates that your request could not be processed. If possible the response will include a message indicating the problem.
        /// <br/>&lt;br&gt;
        /// <br/>A response of `503 Service Unavailable` indicates that the title is currently unavailable, typlically because it is currently being processed. The value of the `Retry-After` header suggests a number of seconds to wait before retrying the request.
        /// </remarks>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="issue_dateon">select content added on the supplied issue date</param>
        /// <param name="issue_datelte">select content added on or before the supplied issue date</param>
        /// <param name="issue_dategte">select content added on or after the supplied issue date</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>```json
        /// <br/>{
        /// <br/>  "content_versions": [
        /// <br/>    {
        /// <br/>      "date": "2017-01-19",
        /// <br/>      "amendment_date": "2017-01-19",
        /// <br/>      "issue_date": "2017-01-19",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   xxx",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-03-21",
        /// <br/>      "amendment_date": "2017-03-21",
        /// <br/>      "issue_date": "2017-03-21",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   xxx",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-05-17",
        /// <br/>      "amendment_date": "2017-05-17",
        /// <br/>      "issue_date": "2017-05-17",
        /// <br/>      "identifier": "200.110",
        /// <br/>      "name": "§ 200.110   Effective/applicability date.",
        /// <br/>      "part": "200",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": "B",
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-05-22",
        /// <br/>      "amendment_date": "2017-05-22",
        /// <br/>      "issue_date": "2017-05-22",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   Open licensing requirement for competitive grant programs.",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    }
        /// <br/>  ],
        /// <br/>  "meta": {
        /// <br/>    "title": "2",
        /// <br/>    "result_count": "4",
        /// <br/>    "issue_date": {
        /// <br/>      "lte": "2018-01-01",
        /// <br/>      "gte": "2017-01-01"
        /// <br/>    },
        /// <br/>    "latest_amendment_date": "2017-05-22",
        /// <br/>    "latest_issue_date": "2017-05-22"
        /// <br/>  }
        /// <br/>}
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetSectionsByTitleAsync(string title, System.DateTimeOffset? issue_dateon = null, System.DateTimeOffset? issue_datelte = null, System.DateTimeOffset? issue_dategte = null, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulationClient : IRegulationClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public RegulationClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "www.ecfr.gov";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Agencies
        /// </summary>
        /// <remarks>
        /// All top-level agencies in name order with children also in name order
        /// </remarks>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "agencies": [
        /// <br/>      {
        /// <br/>        "name": "Administrative Conference of the United States",
        /// <br/>        "short_name": "ACUS",
        /// <br/>        "display_name": "Administrative Conference of the United States",
        /// <br/>        "sortable_name": "Administrative Conference of the United States",
        /// <br/>        "slug": "administrative-conference-of-the-united-states",
        /// <br/>        "children": [],
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 1,
        /// <br/>            "chapter": "III"
        /// <br/>          }
        /// <br/>        ]
        /// <br/>      },
        /// <br/>  ...
        /// <br/>      {
        /// <br/>        "name": "Department of Agriculture",
        /// <br/>        "short_name": "USDA",
        /// <br/>        "display_name": "Department of Agriculture",
        /// <br/>        "sortable_name": "Agriculture, Department of",
        /// <br/>        "slug": "agriculture-department",
        /// <br/>        "children": [
        /// <br/>          {
        /// <br/>          "name": "Agricultural Marketing Service",
        /// <br/>          "short_name": "AMS",
        /// <br/>          "display_name": "Agricultural Marketing Service, Department of Agriculture",
        /// <br/>          "sortable_name": "Agricultural Marketing Service",
        /// <br/>          "slug": "agricultural-marketing-service",
        /// <br/>          "cfr_references": [
        /// <br/>            {
        /// <br/>              "title": 7,
        /// <br/>              "chapter": "I"
        /// <br/>            },
        /// <br/>            ...
        /// <br/>          ],
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 2,
        /// <br/>            "chapter": "IV",
        /// <br/>          },
        /// <br/>          ...
        /// <br/>        ]
        /// <br/>      },
        /// <br/>  ...
        /// <br/>      {
        /// <br/>        "name": "World Agricultural Outlook Board",
        /// <br/>        "short_name": "WAOB",
        /// <br/>        "display_name": "World Agricultural Outlook Board",
        /// <br/>        "sortable_name": "World Agricultural Outlook Board",
        /// <br/>        "slug": "world-agricultural-outlook-board",
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "title": 7,
        /// <br/>            "chapter": "XXXVIII"
        /// <br/>          }
        /// <br/>        ]
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAgenciesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/v1/agencies.json"
                    urlBuilder_.Append("api/admin/v1/agencies.json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Corrections route returns all eCFR corrections.
        /// </summary>
        /// <remarks>
        /// The Corrections service can be used to determine all corrections or can be filtered by title, effective date, or correction date.
        /// </remarks>
        /// <param name="date">Restricts results to eCFR corrections that occurred on or before the specified date and that were corrected on or after the specified date. Format: YYYY-MM-DD</param>
        /// <param name="title">Restricts results to the given title number: Format: '1', '2', '50', etc</param>
        /// <param name="error_corrected_date">Returns only corrections that were corrected on the given date. Format: YYYY-MM-DD</param>
        /// <returns>```json
        /// <br/>  "ecfr_corrections": [
        /// <br/>    {
        /// <br/>      "id": 1,
        /// <br/>      "cfr_references": [
        /// <br/>        {
        /// <br/>          "cfr_reference": "7 CFR 2.80",
        /// <br/>          "hierarchy": {
        /// <br/>            "title": "7",
        /// <br/>            "subtitle": "A",
        /// <br/>            "part": "2",
        /// <br/>            "subpart": "N",
        /// <br/>            "section": "2.80"
        /// <br/>          }
        /// <br/>        }
        /// <br/>      ],
        /// <br/>      "corrective_action": "Amended",
        /// <br/>      "error_corrected": "2005-12-02",
        /// <br/>      "error_occurred": "2005-09-23",
        /// <br/>      "fr_citation": "70 FR 55706",
        /// <br/>      "position": 1,
        /// <br/>      "display_in_toc": false,
        /// <br/>      "title": 7,
        /// <br/>      "year": 2005,
        /// <br/>      "last_modified": "2021-12-22"
        /// <br/>    },
        /// <br/>...
        /// <br/>    {
        /// <br/>        "id": 3858,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "50 CFR 660.71",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "50",
        /// <br/>              "part": "660",
        /// <br/>              "section": "660.71"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": " (e)(398) and (399) correctly designated as (e)(298) and (299)\r\n           \r\n",
        /// <br/>        "error_corrected": "2023-01-09",
        /// <br/>        "error_occurred": "2023-01-01",
        /// <br/>        "fr_citation": "87 FR 77015",
        /// <br/>        "position": 3,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 50,
        /// <br/>        "year": 2023,
        /// <br/>        "last_modified": "2023-01-31"
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  ```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetCorrectionsAsync(System.DateTimeOffset? date = null, string title = null, System.DateTimeOffset? error_corrected_date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/v1/corrections.json"
                    urlBuilder_.Append("api/admin/v1/corrections.json");
                    urlBuilder_.Append('?');
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (error_corrected_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("error_corrected_date")).Append('=').Append(System.Uri.EscapeDataString(error_corrected_date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("null // Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Title not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Corrections title route returns all corrections for the supplied title.
        /// </summary>
        /// <remarks>
        /// The Corrections service can be used to determine all corrections for the given title.
        /// </remarks>
        /// <param name="title">Restricts results to the given title number: Format: '1', '2', '50', etc</param>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "ecfr_corrections": [
        /// <br/>      {
        /// <br/>        "id": 1473,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "6 CFR Part 5",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "6",
        /// <br/>              "chapter": "I",
        /// <br/>              "part": "5"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": "Paragraph 72 added",
        /// <br/>        "error_corrected": "2014-11-12",
        /// <br/>        "error_occurred": "2014-04-02",
        /// <br/>        "fr_citation": "79 FR 18441",
        /// <br/>        "position": 1,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 6,
        /// <br/>        "year": 2014,
        /// <br/>        "last_modified": "2021-12-22"
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "id": 2252,
        /// <br/>        "cfr_references": [
        /// <br/>          {
        /// <br/>            "cfr_reference": "6 CFR 1001.6",
        /// <br/>            "hierarchy": {
        /// <br/>              "title": "6",
        /// <br/>              "chapter": "X",
        /// <br/>              "part": "1001",
        /// <br/>              "section": "1001.6"
        /// <br/>            }
        /// <br/>          }
        /// <br/>        ],
        /// <br/>        "corrective_action": "(b)(4) amended",
        /// <br/>        "error_corrected": "2018-01-16",
        /// <br/>        "error_occurred": "2017-08-28",
        /// <br/>        "fr_citation": "82 FR 34836",
        /// <br/>        "position": 1,
        /// <br/>        "display_in_toc": false,
        /// <br/>        "title": 6,
        /// <br/>        "year": 2018,
        /// <br/>        "last_modified": "2021-12-22"
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetCorrectionsByTitleAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (title == null)
                throw new System.ArgumentNullException("title");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/admin/v1/corrections/title/{title}.json"
                    urlBuilder_.Append("api/admin/v1/corrections/title/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(".json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search results
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <param name="per_page">number of results per page; max of 1,000</param>
        /// <param name="page">page of results; can't paginate beyond 10,000 total results</param>
        /// <param name="order">order of results</param>
        /// <param name="paginate_by">how results should be paginated - 'date' will group results so that all results from a date appear on the same page of pagination. If 'date' is chosen then one of the last_modified_* options is required.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetSearchResultsAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, int? per_page = null, int? page = null, Order? order = null, Paginate_by? paginate_by = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/results"
                    urlBuilder_.Append("api/search/v1/results");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (per_page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("per_page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paginate_by != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paginate_by")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paginate_by, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result count
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchResultCountAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/count"
                    urlBuilder_.Append("api/search/v1/count");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search summary details
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchSummaryAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/summary"
                    urlBuilder_.Append("api/search/v1/summary");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by date
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchResultCountsByDateAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/counts/daily"
                    urlBuilder_.Append("api/search/v1/counts/daily");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by title
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchResultCountByTitleAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/counts/titles"
                    urlBuilder_.Append("api/search/v1/counts/titles");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search result counts by hierarchy
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchResultCountsByHierarchyAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/counts/hierarchy"
                    urlBuilder_.Append("api/search/v1/counts/hierarchy");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search suggestions
        /// </summary>
        /// <param name="query">Search term; searches the headings and the full text</param>
        /// <param name="agency_slugs">limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)</param>
        /// <param name="date">limit to content present on this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_after">limit to content last modified after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_after">limit to content last modified on or after this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_before">limit to content last modified before this date (YYYY-MM-DD)</param>
        /// <param name="last_modified_on_or_before">limit to content last modified on or before this date (YYYY-MM-DD)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchSuggestionsAsync(string query = null, System.Collections.Generic.IEnumerable<string> agency_slugs = null, System.DateTimeOffset? date = null, System.DateTimeOffset? last_modified_after = null, System.DateTimeOffset? last_modified_on_or_after = null, System.DateTimeOffset? last_modified_before = null, System.DateTimeOffset? last_modified_on_or_before = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/v1/suggestions"
                    urlBuilder_.Append("api/search/v1/suggestions");
                    urlBuilder_.Append('?');
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (agency_slugs != null)
                    {
                        foreach (var item_ in agency_slugs) { urlBuilder_.Append(System.Uri.EscapeDataString("agency_slugs[]")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_after != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_after")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_after.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (last_modified_on_or_before != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("last_modified_on_or_before")).Append('=').Append(System.Uri.EscapeDataString(last_modified_on_or_before.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 405)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ancestors route returns all ancestors (including self) from a given level through the top title node.
        /// </summary>
        /// <remarks>
        /// The Ancestry service can be used to determine the complete ancestry to a leaf node at a specific point in time.
        /// <br/>### Example
        /// <br/>The complete hierarchy for **2 CFR 1532.137** is
        /// <br/>```
        /// <br/>Title 2
        /// <br/>  Subtitle B
        /// <br/>    Chapter XV
        /// <br/>      Part 1532
        /// <br/>        Subpart A
        /// <br/>          Section 1532.137
        /// <br/>```
        /// <br/>To retrieve this complete hierarchy you can use the ancestry endpoint and provide a Title, Part and Section (you can provide additional layers of the hierarchy) to retrieve a full ancestry.
        /// <br/>See sample json responses below.
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>```json
        /// <br/>  [
        /// <br/>    {
        /// <br/>        "type": "title",
        /// <br/>        "label": "Title 2 - Federal Financial Assistance",
        /// <br/>        "label_level": "Title 2",
        /// <br/>        "label_description": "Federal Financial Assistance",
        /// <br/>        "identifier": "2"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "subtitle",
        /// <br/>        "label": "Subtitle B - Federal Agency Regulations for Grants and Agreements",
        /// <br/>        "label_level": "Subtitle B",
        /// <br/>        "label_description": "Federal Agency Regulations for Grants and Agreements",
        /// <br/>        "identifier": "B",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 300.1 – 5900.101"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "chapter",
        /// <br/>        "label": "Chapter XV - Environmental Protection Agency",
        /// <br/>        "label_level": "Chapter XV",
        /// <br/>        "label_description": "Environmental Protection Agency",
        /// <br/>        "identifier": "XV",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 1500.1 – 1536.505"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "part",
        /// <br/>        "label": "Part 1532 - Nonprocurement Debarment and Suspension",
        /// <br/>        "label_level": "Part 1532",
        /// <br/>        "label_description": "Nonprocurement Debarment and Suspension",
        /// <br/>        "identifier": "1532",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§§ 1532.10 – 1532.1600"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "subpart",
        /// <br/>        "label": "Subpart A - General",
        /// <br/>        "label_level": "Subpart A",
        /// <br/>        "label_description": "General",
        /// <br/>        "identifier": "A",
        /// <br/>        "reserved": false,
        /// <br/>        "section_range": "§ 1532.137"
        /// <br/>    },
        /// <br/>    {
        /// <br/>        "type": "section",
        /// <br/>        "label": "§ 1532.137 Who in the EPA may grant an exception to let an excluded person participate in a covered transaction?",
        /// <br/>        "label_level": "§ 1532.137",
        /// <br/>        "label_description": "Who in the EPA may grant an exception to let an excluded person participate in a covered transaction?",
        /// <br/>        "identifier": "1532.137",
        /// <br/>        "reserved": false
        /// <br/>    }
        /// <br/>  ]
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAncestorsByTitleAsync(System.DateTimeOffset date, string title, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            if (title == null)
                throw new System.ArgumentNullException("title");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/versioner/v1/ancestry/{date}/title-{title}.json"
                    urlBuilder_.Append("api/versioner/v1/ancestry/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/title-");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(".json");
                    urlBuilder_.Append('?');
                    if (subtitle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subtitle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subtitle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (chapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("chapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(chapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subchapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subchapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subchapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (part != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("part")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(part, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subpart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subpart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subpart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (section != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("section")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(section, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appendix != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appendix")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appendix, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("null // Invalid input or missing some hierarchy", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Source XML for a title or subset of a title. Requests can be for entire titles or part level and below.  Downloadable XML document is returned for title requests.  Processed XML is returned if part, subpart, section, or appendix is requested.
        /// </summary>
        /// <remarks>
        /// The title source route can be used to retrieve the source xml for a complete title or subset. The subset of xml is determined by the lowest leaf node given. For example, if you request Title 1, Chapter I, Part 1, you'll receive the XML only for Part 1 and its children.
        /// <br/>If you request a section you'll receive the section XML inside its parent Part as well as relevant non-section sibling nodes (Auth, Source, etc).
        /// <br/>The largest title source xml files can be dozens of megabytes.
        /// <br/>
        /// <br/>[GPO eCFR XML User guide](https://github.com/usgpo/bulk-data/blob/master/ECFR-XML-User-Guide.md)
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>A downloadable Title XML document for entire Title requests or processed XML for part level and below requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetSourceXmlByTitleAsync(System.DateTimeOffset date, string title, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            if (title == null)
                throw new System.ArgumentNullException("title");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/xml"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/versioner/v1/full/{date}/title-{title}.xml"
                    urlBuilder_.Append("api/versioner/v1/full/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/title-");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(".xml");
                    urlBuilder_.Append('?');
                    if (subtitle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subtitle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subtitle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (chapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("chapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(chapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subchapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subchapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subchapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (part != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("part")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(part, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subpart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subpart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subpart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (section != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("section")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(section, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appendix != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appendix")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appendix, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            return default(FileResponse);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad parameter: invalid date.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No matching content found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Structure JSON for a title
        /// </summary>
        /// <remarks>
        /// The structure JSON endpoint returns the complete structure of a title back as json. This format does not include the content of the title but does include all structure and content nodes as well as their meta data including their type, label, description, identifier and children.
        /// </remarks>
        /// <param name="date">YYYY-MM-DD</param>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "type": "title",
        /// <br/>    "label": "Title 3 - The President",
        /// <br/>    "label_level": "Title 3",
        /// <br/>    "label_description": "The President",
        /// <br/>    "identifier": "3",
        /// <br/>    "children": [
        /// <br/>      {
        /// <br/>        "type": "chapter",
        /// <br/>        "label": "Chapter I - Executive Office of the President",
        /// <br/>        "label_level": "Chapter I",
        /// <br/>        "label_description": "Executive Office of the President",
        /// <br/>        "identifier": "I",
        /// <br/>        "reserved": false,
        /// <br/>        "children": [
        /// <br/>          {
        /// <br/>            "type": "part",
        /// <br/>            "label": "Part 100 - Standards of Conduct",
        /// <br/>            "label_level": "Part 100",
        /// <br/>            "label_description": "Standards of Conduct",
        /// <br/>            "identifier": "100",
        /// <br/>            "reserved": false,
        /// <br/>            "children": [
        /// <br/>              {
        /// <br/>                "type": "section",
        /// <br/>                "label": "§ 100.1 Ethical conduct standards and financial disclosure regulations.",
        /// <br/>                "label_level": "§ 100.1",
        /// <br/>                "label_description": "Ethical conduct standards and financial disclosure regulations.",
        /// <br/>                "identifier": "100.1",
        /// <br/>                "reserved": false
        /// <br/>              }
        /// <br/>            ],
        /// <br/>            "section_range": "§ 100.1"
        /// <br/>          },
        /// <br/>        ],
        /// <br/>      }
        /// <br/>    ]
        /// <br/>  }
        /// <br/>```|</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetJsonForTitleAsync(System.DateTimeOffset date, string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (date == null)
                throw new System.ArgumentNullException("date");

            if (title == null)
                throw new System.ArgumentNullException("title");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/versioner/v1/structure/{date}/title-{title}.json"
                    urlBuilder_.Append("api/versioner/v1/structure/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/title-");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(".json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Summary information about each title
        /// </summary>
        /// <remarks>
        /// The Title service can be used to determine the status of each individual title and of the overall status of title imports and reprocessings. It returns an array of all titles containing a hash for each with the name of the title, the latest amended date, latest issue date, up-to-date date, reserved status, and if applicable, processing in progress status. The meta data returned indicates the latest issue date and whether titles are currently being reprocessed.
        /// </remarks>
        /// <returns>```json
        /// <br/>  {
        /// <br/>    "titles": [
        /// <br/>      {
        /// <br/>        "number": 1,
        /// <br/>        "name": "General Provisions",
        /// <br/>        "latest_amended_on": "2022-05-04",
        /// <br/>        "latest_issue_date": "2022-05-04",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "number": 2,
        /// <br/>        "name": "Federal Financial Assistance",
        /// <br/>        "latest_amended_on": "2022-05-19",
        /// <br/>        "latest_issue_date": "2022-06-03",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false,
        /// <br/>        "processing_in_progress": true
        /// <br/>      },
        /// <br/>      {
        /// <br/>        "number": 3,
        /// <br/>        "name": "The President",
        /// <br/>        "latest_amended_on": "2015-03-17",
        /// <br/>        "latest_issue_date": "2019-06-27",
        /// <br/>        "up_to_date_as_of": "2022-07-28",
        /// <br/>        "reserved": false
        /// <br/>      },
        /// <br/>      ...
        /// <br/>    ],
        /// <br/>    meta": {
        /// <br/>      "date": "2022-07-29",
        /// <br/>      "import_in_progress": true
        /// <br/>    }
        /// <br/>  }
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetTitlesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/versioner/v1/titles.json"
                    urlBuilder_.Append("api/versioner/v1/titles.json");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns an array of all sections and appendices inside a title.
        /// </summary>
        /// <remarks>
        /// Returns the content versions meeting the specified criteria. Each content object includes its identifier, parent hierarchy, last amendment date and issue date it was last updated. Queries return content versions `on` an issue date, or before or on a specific issue date `lte` or on or after `gte` a specific issue date. The `gte` and `lte` parameters may be combined. Use of the `on` parameter precludes use of `gte` or `lte`. In the response, the `date` field is identical to `amendment_date` and is deprecated.
        /// <br/>&lt;br&gt;
        /// <br/>A response of `400 Bad Request` indicates that your request could not be processed. If possible the response will include a message indicating the problem.
        /// <br/>&lt;br&gt;
        /// <br/>A response of `503 Service Unavailable` indicates that the title is currently unavailable, typlically because it is currently being processed. The value of the `Retry-After` header suggests a number of seconds to wait before retrying the request.
        /// </remarks>
        /// <param name="title">Title Number: '1', '2', '50', etc</param>
        /// <param name="issue_dateon">select content added on the supplied issue date</param>
        /// <param name="issue_datelte">select content added on or before the supplied issue date</param>
        /// <param name="issue_dategte">select content added on or after the supplied issue date</param>
        /// <param name="subtitle">Uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="chapter">Roman Numerals and digits 0-9. 'I', 'X', '1'</param>
        /// <param name="subchapter">A SUBCHAPTER REQUIRES A CHAPTER. Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="part">Uppercase letters with optional underscore or dash. 'A', 'B', 'I'</param>
        /// <param name="subpart">A SUBPART REQUIRES A PART. Generally an uppercase letter. 'A', 'B', 'C'</param>
        /// <param name="section">A SECTION REQUIRES A PART. Generally a number followed by a dot and another number. '121.1', '13.4', '1.9'</param>
        /// <param name="appendix">AN APPENDIX REQUIRES A SUBTITLE, CHAPTER or PART. Multiple formats. 'A', 'III', 'App. A'</param>
        /// <returns>```json
        /// <br/>{
        /// <br/>  "content_versions": [
        /// <br/>    {
        /// <br/>      "date": "2017-01-19",
        /// <br/>      "amendment_date": "2017-01-19",
        /// <br/>      "issue_date": "2017-01-19",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   xxx",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-03-21",
        /// <br/>      "amendment_date": "2017-03-21",
        /// <br/>      "issue_date": "2017-03-21",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   xxx",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-05-17",
        /// <br/>      "amendment_date": "2017-05-17",
        /// <br/>      "issue_date": "2017-05-17",
        /// <br/>      "identifier": "200.110",
        /// <br/>      "name": "§ 200.110   Effective/applicability date.",
        /// <br/>      "part": "200",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": "B",
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    },
        /// <br/>    {
        /// <br/>      "date": "2017-05-22",
        /// <br/>      "amendment_date": "2017-05-22",
        /// <br/>      "issue_date": "2017-05-22",
        /// <br/>      "identifier": "3474.20",
        /// <br/>      "name": "§ 3474.20   Open licensing requirement for competitive grant programs.",
        /// <br/>      "part": "3474",
        /// <br/>      "substantive": true,
        /// <br/>      "removed": false,
        /// <br/>      "subpart": null,
        /// <br/>      "title": "2",
        /// <br/>      "type": "section"
        /// <br/>    }
        /// <br/>  ],
        /// <br/>  "meta": {
        /// <br/>    "title": "2",
        /// <br/>    "result_count": "4",
        /// <br/>    "issue_date": {
        /// <br/>      "lte": "2018-01-01",
        /// <br/>      "gte": "2017-01-01"
        /// <br/>    },
        /// <br/>    "latest_amendment_date": "2017-05-22",
        /// <br/>    "latest_issue_date": "2017-05-22"
        /// <br/>  }
        /// <br/>}
        /// <br/>```</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSectionsByTitleAsync(string title, System.DateTimeOffset? issue_dateon = null, System.DateTimeOffset? issue_datelte = null, System.DateTimeOffset? issue_dategte = null, string subtitle = null, string chapter = null, string subchapter = null, string part = null, string subpart = null, string section = null, string appendix = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (title == null)
                throw new System.ArgumentNullException("title");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/versioner/v1/versions/title-{title}.json"
                    urlBuilder_.Append("api/versioner/v1/versions/title-");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append(".json");
                    urlBuilder_.Append('?');
                    if (issue_dateon != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issue_date[on]")).Append('=').Append(System.Uri.EscapeDataString(issue_dateon.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issue_datelte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issue_date[lte]")).Append('=').Append(System.Uri.EscapeDataString(issue_datelte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issue_dategte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issue_date[gte]")).Append('=').Append(System.Uri.EscapeDataString(issue_dategte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subtitle != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subtitle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subtitle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (chapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("chapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(chapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subchapter != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subchapter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subchapter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (part != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("part")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(part, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (subpart != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("subpart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subpart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (section != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("section")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(section, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appendix != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appendix")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appendix, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("```json\n{\n  \"error\": \"Bad date: \'2025-16-01\'\"\n}\n\n# or\n\n{\n  \"error\": \"Found unpermitted parameter: :iss_date.\"\n}\n```\n", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("```json\n{\n  \"message\": \"Title 2 currently unavailable\"\n}\n```\n", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// order of results
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Order
    {

        [System.Runtime.Serialization.EnumMember(Value = @"citations")]
        Citations = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relevance")]
        Relevance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hierarchy")]
        Hierarchy = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"newest_first")]
        Newest_first = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"oldest_first")]
        Oldest_first = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"suggestions")]
        Suggestions = 5,

    }

    /// <summary>
    /// how results should be paginated - 'date' will group results so that all results from a date appear on the same page of pagination. If 'date' is chosen then one of the last_modified_* options is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Paginate_by
    {

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"results")]
        Results = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// A set of sections and appendices that match the provided query params
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Meta
    {
        /// <summary>
        /// description of the search results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// current page of results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current_page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Current_page { get; set; }

        /// <summary>
        /// total count of matching results across all pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }

        /// <summary>
        /// total number of pages in the search results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total_pages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_pages { get; set; }

        /// <summary>
        /// the maximum score of any match in the search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max_score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Max_score { get; set; }

        /// <summary>
        /// the minimum date of all returned results (returned when paginate_by=date option is provided)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Min_date { get; set; }

        /// <summary>
        /// the maximum date of all returned results (returned when paginate_by=date option is provided)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Max_date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625